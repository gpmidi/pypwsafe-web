
### pws vs psafe ###
pws = Cache psafe objects via the local process's memory (Going to Deprecate)
psafe = Cache psafe objects using memory-only MySQL tables (Using going forward)


### Major TODO List ###
* Need to add an "on start" that will do an initial search for psafe files
** Goal: Have personal and non-personal pre-loaded
* Improve and validate input validation for all RPC functions
* Double check all permissions for repos and safes
** Put in unit tests for all possibilities
* Make a production-ready settings template and move the 
the test/debugging one over to a different settings file.
** Should also move test DB stuff to the database config
test settings. See link for test settings in the DB dict. 
**  https://docs.djangoproject.com/en/dev/ref/settings/#test-charset
* Consider moving psafe storage over to a storage manager
** https://docs.djangoproject.com/en/1.4/topics/files/
* Consider creating a new psafe repo for each user's personal psafe files
* Look into request timing differences in the RPC functions possibly giving 
away indications as to if the entry exists but the user doesn't have permissions.
* Move all logic out of individual RPC calls and into tasks or helper functions
** Should help prevent RPC vs View logic being different
* Update the Last Access Time for entries whenever the entry is accessed. 
  
### Helpful Sniplets ###

## Automatically create DB tables
# If running tests (manage.py test), Django can/will change the DB to :memory: 
# and auto create them. Assuming the DB engine is set to sqlite3. Should go in manage.py. 
# http://docs.djangoproject.com/en/dev/howto/custom-management-commands/
# http://stackoverflow.com/questions/3495964/in-django-how-do-i-call-the-subcommand-syncdb-from-the-initialization-script
import sys, os
if "shell" in sys.argv:
    os.environ['DJANGO_SETTINGS_MODULE'] = 'settings'
    from django.core.management import call_command
    call_command('syncdb', interactive = True)
    call_command('shell')
else:
    execute_manager(settings)

